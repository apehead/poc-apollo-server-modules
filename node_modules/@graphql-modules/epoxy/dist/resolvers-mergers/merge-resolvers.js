"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var deepMerge = require("deepmerge");
function mergeResolvers(resolversDefinitions) {
    var e_1, _a;
    if (!resolversDefinitions || resolversDefinitions.length === 0) {
        return {};
    }
    if (resolversDefinitions.length === 1) {
        return resolversDefinitions[0];
    }
    var resolversFactories = new Array();
    var resolvers = new Array();
    try {
        for (var resolversDefinitions_1 = tslib_1.__values(resolversDefinitions), resolversDefinitions_1_1 = resolversDefinitions_1.next(); !resolversDefinitions_1_1.done; resolversDefinitions_1_1 = resolversDefinitions_1.next()) {
            var resolversDefinition = resolversDefinitions_1_1.value;
            if (typeof resolversDefinition === 'function') {
                resolversFactories.push(resolversDefinition);
            }
            else if (typeof resolversDefinition === 'object') {
                resolvers.push(resolversDefinition);
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (resolversDefinitions_1_1 && !resolversDefinitions_1_1.done && (_a = resolversDefinitions_1.return)) _a.call(resolversDefinitions_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    if (resolversFactories.length) {
        return (function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var resultsOfFactories = resolversFactories.map(function (factory) { return factory.apply(void 0, tslib_1.__spread(args)); });
            return deepMerge.all(tslib_1.__spread(resolvers, resultsOfFactories));
        });
    }
    else {
        return deepMerge.all(resolvers);
    }
}
exports.mergeResolvers = mergeResolvers;
//# sourceMappingURL=merge-resolvers.js.map