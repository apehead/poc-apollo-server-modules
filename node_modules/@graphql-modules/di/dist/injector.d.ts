import { ServiceIdentifier, Type, Provider, ProviderScope } from './types';
export declare class Injector {
    private _name;
    private _providerScope;
    private _children;
    private _classMap;
    private _factoryMap;
    private _instanceMap;
    private _applicationScopeSet;
    private _requestScopeSet;
    private _sessionScopeSet;
    constructor(_name?: string, _providerScope?: ProviderScope, _children?: Set<Injector>);
    addChild(...children: Injector[]): void;
    removeChild(...children: Injector[]): void;
    hasChild(child: Injector): boolean;
    provide<T>(provider: Provider<T>): void;
    has<T>(serviceIdentifier: ServiceIdentifier<T>): boolean;
    remove<T>(serviceIdentifier: ServiceIdentifier<T>): void;
    readonly scopeSet: Set<string | symbol | Type<any> | import("./types").Abstract<any>>;
    get<T>(serviceIdentifier: ServiceIdentifier<T>): T;
    private static sessionNameSessionInjectorMapMap;
    getSessionInjector<Session>(session: Session): Injector;
    call<Fn extends (this: ThisArg, ...args: any[]) => any, ThisArg>(fn: Fn, thisArg: ThisArg): ReturnType<Fn>;
    callHookWithArgs<T, Args extends any[]>(hook: string, serviceIdentifier: ServiceIdentifier<T>, ...args: Args): Promise<any>;
}
