import { Injector } from './injector';
export interface Abstract<T> {
    prototype: T;
}
export declare type ServiceIdentifier<T> = (string | symbol | Type<T> | Abstract<T>);
export declare type Type<T> = new (...args: any[]) => T;
export interface ValueProvider<T> extends BaseProvider<T> {
    useValue: T;
}
export interface ClassProvider<T> extends BaseProvider<T> {
    useClass: Type<T>;
}
export declare type Factory<T> = (injector: Injector) => T;
export interface FactoryProvider<T> extends BaseProvider<T> {
    useFactory: Factory<T>;
}
export interface BaseProvider<T> extends ProviderOptions {
    provide: ServiceIdentifier<T>;
}
export interface TypeProvider<T> extends Type<T> {
}
export declare type Provider<T = any> = TypeProvider<T> | ValueProvider<T> | ClassProvider<T> | FactoryProvider<T>;
export interface ProviderOptions {
    overwrite?: boolean;
    scope?: ProviderScope;
}
export declare enum ProviderScope {
    Application = "APPLICATION",
    Request = "REQUEST",
    Session = "SESSION"
}
export declare type Instances<Dependencies extends Array<ServiceIdentifier<any>>> = {
    [Key in keyof Dependencies]: Dependencies[Key] extends Type<any> ? InstanceType<Dependencies[Key]> : any;
};
export declare type ExtendedSession<Session> = Session & {
    nameSessionInjectorMap: Map<string, Injector>;
};
