"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var lodash_1 = require("lodash");
var utils_1 = require("./utils");
function resolveRelevantMappings(resolvers, path, allMappings) {
    var result = [];
    var splitted = path.split('.');
    if (splitted.length === 2) {
        var typeName_1 = splitted[0];
        var fieldName = splitted[1];
        if (fieldName === '*') {
            return Object.keys(resolvers[typeName_1])
                .map(function (field) { return typeName_1 + "." + field; })
                .filter(function (mapItem) { return !allMappings[mapItem]; });
        }
        else {
            return [path];
        }
    }
    return result;
}
/**
 * Wraps the resolvers object with the resolvers composition objects.
 * Implemented as a simple and basic middleware mechanism.
 *
 * @param resolvers - resolvers object
 * @param mapping - resolvers composition mapping
 * @hidden
 */
function composeResolvers(resolvers, mapping) {
    if (mapping === void 0) { mapping = {}; }
    Object.keys(mapping).map(function (resolverPath) {
        var composeFns = mapping[resolverPath];
        var relevantFields = resolveRelevantMappings(resolvers, resolverPath, mapping);
        relevantFields.forEach(function (path) {
            var fns = utils_1.chainFunctions(tslib_1.__spread(utils_1.asArray(composeFns), [function () { return lodash_1.get(resolvers, path); }]));
            lodash_1.set(resolvers, path, fns());
        });
    });
    return resolvers;
}
exports.composeResolvers = composeResolvers;
//# sourceMappingURL=resolvers-composition.js.map