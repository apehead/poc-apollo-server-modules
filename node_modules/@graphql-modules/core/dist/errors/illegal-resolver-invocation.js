"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var IllegalResolverInvocationError = /** @class */ (function (_super) {
    tslib_1.__extends(IllegalResolverInvocationError, _super);
    function IllegalResolverInvocationError(_resolverPath, _moduleName, _detail) {
        var _this = _super.call(this, "\n      GraphQL-Modules Error: Illegal Resolver Invocation!\n        - Resolver #" + _resolverPath + " is invoked unsafely outside of GraphQL-Modules.\n        -- Detail: " + _detail + "\n\n      Possible solutions:\n      - You may forget to pass context of the module to your GraphQL Server.\n      -- Check if it is passed like below;\n      ---  const { schema, context } = YourModule;\n      ---  new ApolloServer({ schema, context });'\n  ") || this;
        _this._resolverPath = _resolverPath;
        _this._moduleName = _moduleName;
        _this._detail = _detail;
        Object.setPrototypeOf(_this, IllegalResolverInvocationError.prototype);
        Error.captureStackTrace(_this, IllegalResolverInvocationError);
        return _this;
    }
    Object.defineProperty(IllegalResolverInvocationError.prototype, "resolverPath", {
        get: function () {
            return this._resolverPath;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IllegalResolverInvocationError.prototype, "moduleName", {
        get: function () {
            return this._moduleName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IllegalResolverInvocationError.prototype, "detail", {
        get: function () {
            return this._detail;
        },
        enumerable: true,
        configurable: true
    });
    return IllegalResolverInvocationError;
}(Error));
exports.IllegalResolverInvocationError = IllegalResolverInvocationError;
//# sourceMappingURL=illegal-resolver-invocation.js.map