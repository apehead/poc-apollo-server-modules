"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var DependencyModuleNotFoundError = /** @class */ (function (_super) {
    tslib_1.__extends(DependencyModuleNotFoundError, _super);
    function DependencyModuleNotFoundError(_dependency, _dependent) {
        var _this = _super.call(this, "\n      GraphQL-Modules Error: Dependency Module Not Found!\n      - Module #" + _dependency + " couldn't be imported into #" + _dependent + "\n      -- Module #" + _dependency + " is not defined in that scope!\n\n      Possible solutions:\n      - If you're using 'forRoot' on the upper import, use 'forChild' on the children imports.\n      - If you're using 'forChild' on the parent imports, use 'forRoot' on the upper import.\n  ") || this;
        _this._dependency = _dependency;
        _this._dependent = _dependent;
        Object.setPrototypeOf(_this, DependencyModuleNotFoundError.prototype);
        Error.captureStackTrace(_this, DependencyModuleNotFoundError);
        return _this;
    }
    Object.defineProperty(DependencyModuleNotFoundError.prototype, "dependency", {
        get: function () {
            return this._dependency;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DependencyModuleNotFoundError.prototype, "dependent", {
        get: function () {
            return this._dependent;
        },
        enumerable: true,
        configurable: true
    });
    return DependencyModuleNotFoundError;
}(Error));
exports.DependencyModuleNotFoundError = DependencyModuleNotFoundError;
//# sourceMappingURL=dependency-module-not-found.js.map